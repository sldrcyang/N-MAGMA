# This is a tutorial on how to conduct nMAGMA, which can be used to reproduce the results in our manuscript. 
# There are totally 5 steps to retain the final nMAGMA results.

# The initial nMAGMA is performed on R and MAGMA version 1.07b, downloaded from [https://ctg.cncr.nl/software/magma]. As the revised version of MAGMA (MAGMA v.1.08) can better controls for the potential type I error rate inflation, we updated the code using MAGMA v.1.08b.

## Data summary
# The SCZ GWAS summary = scz.swe.pgc1.2013-11b.zip and 49eur.daner_PGC_SCZ49.sh2_mds10_1000G-frq_2.gz can be downloaded from PGC database: https://www.med.unc.edu/pgc/download-results/scz/

# For eQTL data and gene expression data, we downloaded them at GTEx database: https://storage.googleapis.com/gtex_analysis_v8/single_tissue_qtl_data/GTEx_Analysis_v8_eQTL.tar; https://storage.googleapis.com/gtex_analysis_v8/rna_seq_data/GTEx_Analysis_2017-06-05_v8_RNASeQCv1.1.9_gene_median_tpm.gct.gz

# For Hi-C data, we download them at 3D-genome Interaction Viewer and database:  http://kobic.kr/3div. We attach the data we used in RE_to_genes.zip.

# Before analyzing, you should unify the gene and snp coordinate formats between different resources; 

# The protein-coding gene loc we used are all transformed to Ensembl (GRCH37 v87), the SNPs are transformed to dbSNP (version 151);

# The regulatory elements (REs) is defined in ENCODE and Ensembl. We attach the two zip files in the RELOC folder for use: 'combined_regulatory_elements_for_hg19.bed.zip' and 'combined_regulatory_elements_for_hg38.bed.zip'. 
# As this paper depends on the hg19 loc version, we have first transformed the 'combined_regulatory_elements_for_hg19.bed.zip' to MAGMA format of 'RELOC_hg19.txt'. You can directly use 'RELOC_hg19.txt' in the RELOC folder, or transformed the 'combined_regulatory_elements_for_hg38.bed.zip' to MAGMA format yourself which is very conventient. Besides, we don't use chromsome X, Y and GL in this paper. 


###############
### Step 1 ### 
###############
### Annotate SNPs to genes
## initial
magma_v1.07b_static/magma –annotate \
--snp-loc SNPLOC.txt \
--gene-loc protein_coding_gene.loc \
--out snp_to_gene

## updated
magma_v1.08b_static/magma –annotate \
--snp-loc SNPLOC.txt \
--gene-loc protein_coding_gene.loc \
--out snp_to_gene

### Annotate SNPs to REs
## initial
magma_v1.07b_static/magma –annotate \
--snp-loc SNPLOC.txt \
--gene-loc RELOC.txt \
--out snp_to_re

## updated
magma_v1.08b_static/magma –annotate \
--snp-loc SNPLOC.txt \
--gene-loc RELOC.txt \
--out snp_to_re



###############
### Step 2 ###
###############
# R is used to generate the three annotate files: Tissue_Hi-C.genes.annot, Tissue_eqtl.genes.annot, Tissue_TOM.genes.annot. 
# The three kinds of files derived in manuscript are also available at our Github repo, you can also download them and skip to step 3.


#==============================
# Create Hi-C annotate files
#==============================
# For creating Hi-C annotate files, we assign the SNPs to genes via SNP-to-RE annotations and RE-gene regulatory pairs.

snp_to_re <- readLines("snp_to_re.genes.annot")
re_to_gene <- read.table("3DIV_Tissue_RE_to_genes.txt", header = F,  sep = "\t", stringsAsFactors = F)
library(dplyr)
re <- c()
snp <- c()
for(i in 1:length(snp_to_re)){
  temp <- unlist(strsplit(snp_to_re[i], "\t"))
  re[i] <- temp[1]
  snp[i] <- paste(temp[-2:-1], collapse=" ")
}
snp_to_re2 <- data.frame(re=re, snp=snp, stringsAsFactors = FALSE)
b <- intersect(re_to_gene[,1], snp_to_re2[,1])
b <- as.vector(b)
re_to_gene <- subset(re_to_gene, re_to_gene$V1%in%b)
snp_to_re2 <- subset(snp_to_re2, snp_to_re2[,1]%in%b)
snp_to_gene <- merge(re_to_gene, snp_to_re2, by.x="V1", by.y="re", all.x=T)
snp_to_gene <- snp_to_gene[,-1]

names(snp_to_gene)=c("gene", "snp")
snp_to_gene <- snp_to_gene %>% group_by(gene) %>% summarise(snp = paste(snp, collapse = " "))

# add gene coordinates
gene_bp <- read.table("protein_coding_gene.loc", header = F,  sep = "\t", stringsAsFactors = F)
names(gene_bp) <- c("gene", "chr", "begin", "end")
library(tidyr)
gene_bp <- tidyr::unite(gene_bp, "bp", chr, begin, sep = ":")
gene_bp <- tidyr::unite(gene_bp, "bp", bp, end, sep = ":")
gene_bp=gene_bp[,c(1,2)]

final_snp_to_gene <- merge(snp_to_gene, gene_bp, by.x="gene", by.y="gene")
final_snp_to_gene <- final_snp_to_gene[,c(1,3,2)]
write.table(final_snp_to_gene, "Intermediate.genes.annot", row.names = F, col.names = F, sep=" ", quote=F)

#Remove duplicate SNPs on the same gene
data <- readLines("Intermediate.genes.annot")
data <- as.list(data)
temp <- list()
for(i in 1:length(data)){
  temp[[i]] <- unlist(strsplit(data[[i]], " "))
  temp[[i]] <- as.vector(temp[[i]])
  temp[[i]] <- unique(temp[[i]])
}
file.remove('Intermediate.genes.annot')
for(i in 1:length(temp)){
  cat(temp[[i]], file = "Tissue_Hi-C.genes.annot", sep = "\t", fill = FALSE, labels = NULL,append = TRUE)
  cat("\n", file = "Tissue_Hi-C.genes.annot", sep = "\t", fill = FALSE, labels = NULL,append = TRUE)
}


#==============================
# Create eQTL annotate files
#==============================
# The tissue-specific gene-snp significant pairs should be first extracted from GTEx files, named as 'Tissue.signifpairs.txt', which is like:
# Gene1 SNP1
# Gene2 SNP2
# Gene3 SNP3
# ...   ...

signifpairs <- read.table("Tissue.signifpairs.txt", header = F,  sep = "\t",stringsAsFactors = F)
names(signifpairs) <- c('gene', 'snp')
snp_to_gene <- signifpairs %>% group_by(gene) %>% summarise(snp = paste(snp, collapse = " "))

# add gene coordinates (this step can also be performed directly in the Step 3, Merge_annot_files.R)
gene_bp=read.table("protein_coding_gene.loc", header = F,  sep = "\t", stringsAsFactors = F)
names(gene_bp) <- c("gene", "chr", "begin", "end")
library(tidyr)
gene_bp <- tidyr::unite(gene_bp, "bp", chr, begin, sep = ":")
gene_bp <- tidyr::unite(gene_bp, "bp", bp, end, sep = ":")
gene_bp <- gene_bp[,c(1,2)]

final_snp_to_gene <- merge(snp_to_gene, gene_bp, by.x="gene", by.y="gene")
write.table(final_snp_to_gene, "Intermediate.genes.annot", row.names = F, col.names=F, sep=" ", quote=F)

#Remove duplicate SNPs on the same gene
data <- readLines("Intermediate.genes.annot")
data <- as.list(data)
temp <- list()
for(i in 1:length(data)){
  temp[[i]] <- unlist(strsplit(data[[i]], " "))
  temp[[i]] <- as.vector(temp[[i]])
  temp[[i]] <- unique(temp[[i]])
}
file.remove('Intermediate.genes.annot')
for(i in 1:length(temp)){
  cat(temp[[i]], file = " Tissue_eqtl.genes.annot", sep = "\t", fill = FALSE, labels = NULL, append = TRUE)
  cat("\n", file = " Tissue_eqtl.genes.annot", sep = "\t", fill = FALSE, labels = NULL, append = TRUE)
}


#=============================================================================================================================
# For calculating significant gene pairs based on their expression data, script Calcu_TOM_extract_signifgenepairs.R is used;
# The output file is named as 'Tissue.0.15.TOM.signifgenepairs.txt', which is like:
# Gene1 Gene2 tol_val1 row_num1 col_num1
# Gene1 Gene3 tol_val2 row_num2 col_num2
# Gene2 Gene4 tol_val3 row_num3 col_num3
# ...   ...
#=============================================================================================================================


#==============================
# Create TOM annotate files
#==============================
# We first annotate eQTLs to genes highly connected with their eGenes (TOM>=0.15)

genepairs <- read.table("Tissue.0.15.TOM.signifgenepairs.txt", header = T,  sep = "\t",check.names=F,stringsAsFactors = F)
data <- readLines("Tissue.signifpairs.txt") #this file is also an input file in the step of 'Creating eQTL annotate files' above
library(dplyr)
gene <- c()
bp <- c()
snp <- c()
for (i in 1:length(data)){
  temp <- unlist(strsplit(data[i], "\t"))
  gene[i] <- temp[1]
  bp[i] <- temp[2]
  snp[i] <- paste(temp[-2:-1], collapse = " ")
}
data1 <- data.frame(gene=gene, snp=snp, stringsAsFactors = F)

b <- union(intersect(genepairs$gene1_name, data1$gene), intersect(genepairs$gene2_name, data1$gene)) #genes that are both in signif gene pairs and have eqtls
genepairs1 <- subset(genepairs,(genepairs$gene1_name%in%b) | (genepairs$gene2_name%in%b)) #signif gene pairs that exist at least one genes having eqtls

genepairs2 <- genepairs1[,-3:-5]
genepairs3 <- merge(genepairs2, data1, by.x='gene1_name', by.y='gene',all.x=T)
names(genepairs3) <- c('gene1_name', 'gene2_name', 'snp_of_gene1')
genepairs3 <- merge(genepairs3, data1, by.x='gene2_name', by.y='gene', all.x=T)
genepairs3 <- genepairs3[,c(2,3,1,4)]
names(genepairs3) <- c("gene1_name", 'snp_of_gene1', "gene2_name", 'snp_of_gene2')

genepairs3[is.na(genepairs3)] <- "" 

library(tidyr)
genepairs4 <- tidyr::unite(genepairs3, "snp1+snp2", snp_of_gene1, snp_of_gene2, sep = " ", remove = F)
genepairs4$`snp1+snp2`=trimws(genepairs4$`snp1+snp2`, "both") #Remove spaces at both ends
gene1 <- genepairs4[,c(1,2)]
gene2 <- genepairs4[,c(4,2)]
names(gene2) <- names(gene1)
gene_tot <- rbind(gene1, gene2) 

#read gene loc
gene_bp <- read.table("protein_coding_gene.loc", header = F,  sep = "\t", stringsAsFactors = F)
names(gene_bp) <- c("gene", "chr", "begin", "end")
library(tidyr)
gene_bp <- tidyr::unite(gene_bp, "bp", chr, begin, sep = ":")
gene_bp <- tidyr::unite(gene_bp, "bp", bp, end, sep = ":")
gene_bp <- gene_bp[,c(1,2)]

gene_tot1 <- subset(gene_tot, gene_tot$gene1_name%in%gene_bp$gene) #the genes after expanded
names(gene_tot1) <- c("gene", "snp")
tom_expanded_gene <- gene_tot1 %>% group_by(gene) %>% summarise(snp = paste(snp, collapse = " "))

x <- merge(gene_bp, tom_expanded_gene, by.x="gene", by.y='gene')
write.table(x, file="Intermediate.genes.annot", sep=" ", row.names=F, col.names=F, quote=F)

#Remove duplicate SNPs on the same gene
data <- readLines("Intermediate.genes.annot")
data <- as.list(data)
library(dplyr)
temp <- list()
for(i in 1:length(data)){
  temp[[i]] <- unlist(strsplit(data[[i]], " "))
  temp[[i]] <- as.vector(temp[[i]])
  temp[[i]] <- unique(temp[[i]])
}
file.remove('Intermediate.genes.annot')
for (i in 1:length(temp)){
  cat(temp[[i]], file = "Tissue_TOM.genes.annot", sep = "\t", fill = FALSE, labels = NULL, append = TRUE)
  cat("\n", file = "Tissue_TOM.genes.annot", sep = "\t", fill = FALSE, labels = NULL, append = TRUE)
}



###############
### Step 3 ###
###############
# Script Merge_annot_files.R is used in this step repeatedly to merge snp_to_gene.genes.annot, Tissue_Hi-C.genes.annot, Tissue_eqtl.genes.annot, Tissue_TOM.genes.annot.  
# Then you get a final snp-to-gene annotate file, provided that it is named Tissue.merge.genes.annot.
# In this step, you can also get annotate files of MAGMA+ eQTL, MAGMA+ Hi-C and MAGMA+ Hi-C+ eQTL, which were mentioned in our manuscript.



###############
### Step 4 ###
###############
### Perform gene analysis using MAGMA
## intial
magma_v1.07b_static/magma --bfile g1000_eur \
--pval GWAS_summary.txt N=[N]\
--gene-annot Tissue.merge.genes.annot \
--gene-model snp-wise=mean \
--out Tissue.merge.gene_analysis.mean

## updated
magma_v1.08b_static/magma --bfile g1000_eur \
--pval GWAS_summary.txt N=[N]\
--gene-annot Tissue.merge.genes.annot \
--gene-model snp-wise=mean \
--out Tissue.merge.gene_analysis.mean


### Meta analysis
# If you have  several GWAS summary datasets, your can merge them using MAGMA
## initial
magma_v1.07b_static/magma --meta raw= Tissue.merge1.gene_analysis.mean.genes.raw, Tissue.merge2.gene_analysis.mean.genes.raw \
--out Tissue.merge.gene_analysis.mean

## updated
magma_v1.08b_static/magma --meta raw= Tissue.merge1.gene_analysis.mean.genes.raw, Tissue.merge2.gene_analysis.mean.genes.raw \
--out Tissue.merge.gene_analysis.mean



###############
### Step 5 ###
###############
### Perform gene-set analysis using MAGMA
## initial
magma_v1.07b_static/magma --gene-results Tissue.merge.gene_analysis.mean.genes.raw \
--set-annot gene-set.txt \
--out Tissue.merge.geneset_analysis.mean

## updated
magma_v1.08b_static/magma --gene-results Tissue.merge.gene_analysis.mean.genes.raw \
--set-annot gene-set.txt \
--out Tissue.merge.geneset_analysis.mean


